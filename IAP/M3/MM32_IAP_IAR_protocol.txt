
[MM32串口在线升级协议]
========================================================================================
1. 协议格式
	PC发送 : 3A + CMD + Length(2BYTE) + data(n) + checksum + 0A
	MCU返回: 2A + CMD + Status(n) + checksum + 0A
	
	checksum = CMD位置(包含CMD在内)到checksum数据之间的所有数据的累加和取低8bit数据
	
2. 协议命令
	MCU探测命令 A5  MCU返回5A则为探测到MCU
	
	01 启动/停止编程
	02 读取MCU信息	
	03 擦除编程内存
	04 编程	
	05 读取程序
	06 校验
	07 启动应用程序
	08 设置应用启动参数
	
注意: 串口无数据情况下MCU将在500ms后运行Application用户程序

[协议讲解]
========================================================================================

1. 探测MCU
	PC连续发送十六进制A5如果接收到串口返回数据十六进制5A则认为检测到了MCU芯片，开始其他操作
	
	启动协议:
	PC发送字符串012345678901234567890123456789   MCU返回987654321098765432109876543210
	PC发送字符串987654321098765432109876543210   MCU返回012345678901234567890123456789
	正确执行完序列MCU可用编程协议操作(这将在500ms内完成一条消息的确认, 否则将运行APPLICATION)
	
2. 启动/停止编程
	PC发送 ：3A + 01 + 0001 + status + checksum + 0A
	MCU返回: 2A + 01 + checksum + 0A
	
	status 00关闭编程 01打开编程
	
3. 读取MCU信息
	PC发送 : 3A + 02 + checksum + 0A
	MCU返回: 2A + 02 + 10 + ISP_IAP版本(4BYTE) + 单片机型号(4BYTE) + 可编程Flash分区数 + 可编程起始地址0(4BYTE) + 可编程长度0(4BYTE) + .. + 可编程起始地址n(4BYTE) + 可编程长度n(4BYTE) + checksum + 0A
	
4. 擦除编程内存
	PC发送 : 3A + 03 + 0008 + 擦除起始地址(4BYTE) + 擦除Flash长度(4BYTE) + checksum + 0A
	MCU返回: 2A + 03 + 01 + errorno + checksum + 0A
	
	errorno
	00 擦除成功
	01 擦除失败
	
5. 编程
	PC发送 : 3A + 04 + Length(2BYTE) + 本次编程的Flash起始地址(4BYTE) + 本次编程的数据个数据(2BYTE) + 本次的编程数据(nBYTE) + checksum + 0A
	MCU返回: 2A + 04 + 01 + errorno + checksum + 0A
	
	errorno
	00 编程成功
	01 编程失败希望重发
	
6. 读取MCU内部程序
	PC发送 : 3A + 05 + 0006 + 本次读取的Flash起始地址(4BYTE) + 本次读取的数据个数据(2BYTE) + checksum + 0A
	MCU返回: 2A + 05 + Length(2BYTE) + 本次读取的数据个数据(2BYTE) + 本次的编程数据(nBYTE) + checksum + 0A
	
7. 校验程序
	PC发送 : 3A + 06 + 000A + 本次校验的Flash起始地址(4BYTE) + 本次编程的数据个数据(2BYTE) + CRC32校验值(4BYTE) + checksum + 0A
	MCU返回: 2A + 06 + 0004 + CRC32校验值(4BYTE) + checksum + 0A
	
8. 启动应用程序
	PC发送 : 3A + 07 + checksum + 0A
	MCU返回: 2A + 07 + checksum + 0A
	
9. 设置APPLICATION信息
	PC发送 : 3A + 08 + length(2BYTE) + bootr(字符串) + checksum + 0A
	MCU返回: 2A + 08 + checksum + 0A
	
	boor : boor app = "XXXX", auth = "XXXX", version = "XXXX", start = 0xXXXXXXXX, length : xxxxxxxx
	
	
/********************************************************************************************************************************************
														上位机编写操作步骤
********************************************************************************************************************************************/
【初始状态】
	探测MCU，MCU初始上电期间如果接收到上位机发送的十六进制A5后会返回十六进制5A至上位机，上位机接收到十六进制5A则证明检测到了MCU上位机则转换状态
	至启动编程协议状态

【启动编程协议状态】
	上位机发送字符串"0123456789012345678901234567890123456789"MCU返回"9876543210987654321098765432109876543210"
	当上位机接收到字符串"9876543210987654321098765432109876543210"则再次发送"0123456789012345678901234567890123456789"至MCU
	MCU收到"0123456789012345678901234567890123456789"则会返回"0123456789012345678901234567890123456789"，上位机收到此字符串
	则进入编程协议模式，否则连续测试3次，测试失败则返回下载失败
	
	注意: 设置一个标志位说明当前编程协议已经打开

【编程协议模式】
----------------------------------------------------------------------------------------------------------------------------------------------
1.【启动编程状态】
	<a> 上位机发送3A 01 00 01 01 03 0A后收到MCU的返回信息2A 01 01 0A则证明启动了可编程模式(超时时间为100ms)
	<b> 3次收不到返回消息则认为下载失败
	
	要点: 设置一个标志位证明编程模式可用
	
2.【读取MCU信息状态】
	<a> 上位机发送读取信息指令后收到MCU的正确返回则认为读取到了MCU信息, 并进行解析作为编程数据参考引用(超时时间为100ms)
	<b> 超时3次命令收不到返回数据则认为下载失败
	
3.【内存擦除状态】
	<a> 上位机发送擦除内存指令(指定擦除内存的范围)后收到MCU的返回信息则认为内存擦除完成(超时时间可动态改变至少100ms)
	<b> 超时3次命令收不到返回则认为下载失败
	<c> MCU存储器擦除可能需要多次进项<a><b>步骤
	
4.【数据写入状态】
	<a> 上位机发送写入数据指令后MCU返回信息则认为数据写入完成(超时时间根据具体写入数据长度待定), 写入失败则重新写入这组数据
	<b> 超时3次数据写入失败则认为程序下载失败
	<c> 这个步骤需要多次进行
	
5.【数据核实状态】
	<a> 上位置发送核实数据命令后MCU返回核实后的校验值CRC32(超时时间根据具体核实数据长度待定), 核实无返回则重新发送命令
		核实时校验错误则认为此次编程错误表明编程失败
	<b> 超时3次则认为编程失败
	<c> 这个步骤需要多次进行
	
6.【启动应用状态】
	<a> 上位机发送启动应用命令, 收到MCU返回的信息则认为应用已经启动(超时时间100ms), 否则认为启动失败则再次尝试启动
		最多尝试3次, 3次失败则认为应用已经被启动, 不再理睬
		

#define EVENT_PROTOCOL_RECV			BIT(0)
#define EVENT_TIMEOUT				BIT(1)

#define PROGRAM_STREAM0				"0123456789012345678901234567890123456789"
#define PROGRAM_STREAM1				"9876543210987654321098765432109876543210"

/* 主机编程状态列举 */
enum program_state
{
	PROGRAM_STATE_IDLE,				// 空闲
	PROGRAM_STATE_PROBE,			// 探测MCU
	PROGRAM_STATE_STREAM,			// 启动流
	PROGRAM_STATE_START,			// 启动编程
	PROGRAM_STATE_READ_INFO,		// 读取编程信息
	PROGRAM_STATE_ERASE,			// 擦除存储器
	PROGRAM_STATE_WRITE,			// 写数据
	PROGRAM_STATE_VERIF,			// 核实数据
	PROGRAM_STATE_STARTUP			// 启动应用
};

struct program_info
{
	memory_t range;
	unsigned char *buffer;
	unsigned long length;
};

typedef struct program_info *program_info_t;

/* 本次编程信息 */
static struct program_info program_info;

/* 编程状态 */
static enum program_state program_next_state;

/* 编程超时计数器 */
static unsigned count timeout_count;

/* 编程错误码 */
static unsigned long program_errno;

void program_start(program_info_t info)
{
	memcpy(&program_info, info, sizeof(program_info_t));
	program_state = PROGRAM_STATE_PROBE;
	timeout_count = 0;
}

/* 编程探测处理 */
void program_state_probe(unsigned long event)
{
	if(event & EVENT_TIMEOUT)
	{
		if(++timeout_count >= 3)
		{
			program_errno = -PROGRAM_ERROR;
			program_state = PROGRAM_STATE_IDLE;
			timeout_count = 0;
		}
		else
		{
			serial.write(0xA5);
		}
	}
	else if(event & EVENT_PROTOCOL_RECV)
	{
		unsigned char uchr;
		
		serial.read(&uchr, 1);
		if(uchr != 0x5A)
		{
			serial.write(0xA5);
		}
		else
		{
			program_errno = PROGRAM_OK;
			program_state = PROGRAM_STATE_STREAM;
			timeout_count = 0;
		}
	}
}

/* 启动编程协议处理 */
void program_state_stream(unsigned long event)
{
	if(event & EVENT_TIMEOUT)
	{
		if(++timeout_count >= 3)
		{
			program_errno = -PROGRAM_ERROR;
			program_state = PROGRAM_STATE_IDLE;
			timeout_count = 0;
		}
		else
		{
			serial.write(PROGRAM_STREAM0);
		}
	}
	else if(event & EVENT_PROTOCOL_RECV)
	{
		unsigned char uchr;
		
		serial.read(&uchr, 1);
		if(uchr != 0x5A)
		{
			serial.write(0xA5);
		}
		else
		{
			program_errno = PROGRAM_OK;
			program_state = PROGRAM_STATE_STREAM;
			timeout_count = 0;
		}
	}
}

typedef long (*program_callback)(unsigned long event);

/* 编程运行组 */
static program_callback program_write_callback_array[] = 
{
	program_state_idle,
	program_state_probe,
	program_state_stream,
	program_state_start,
	program_state_erase,
	program_state_write,
	program_state_verif,
	program_state_startup,
};

/* 读取数据运行组 */
static program_callback program_read_callback_array[] = 
{
	program_state_idle,
	program_state_probe,
	program_state_stream,
	program_state_start,
	program_state_read,
	program_state_startup,
};

void program_handler(void)
{
	unsigned long event;
	long result;
	
	wait_event(&event);
	result = program_write_callback_array[program_next_state](event);
	if(result == PROGRAM_OK)
	{
		program_next_state++;
	}
	else if(result == (-PROGRAM_ERROR))
	{
		program_next_state = 0;
	}
}
	